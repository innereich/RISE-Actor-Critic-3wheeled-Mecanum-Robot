clear;close all;clc;
    %% parameters
        m=10;
        l=0.5; r=0.05;
        I_theta=5; I_phi=0.1;
        muy=1;
        %ro=-0.1;
        m1=4*m*r^2/9+I_theta*r^2/(9*l^2)+I_phi;
        m2=I_theta*r^2/(9*l^2)-2*m*r^2/9;
        M=[m1 m2 m2; m2 m1 m2; m2 m2 m1];
    %% Time interval and simulation time
        Step=0.001;
        t=0:Step:60;
    %% Variables
        % States
        eta             = cell(1,size(t,2));
        %eta_dot         = cell(1,size(t,2));
        
        upsilon         = cell(1,size(t,2));
%        upsilon_dot     = cell(1,size(t,2));
        
        e1              = cell(1,size(t,2));
        e2              = cell(1,size(t,2));
        z             = cell(1,size(t,2));
        
        % Reference cordination
        eta_d           = cell(1,size(t,2));
        eta_d_dot       = cell(1,size(t,2));
        eta_d_dot_dot   = cell(1,size(t,2));
        % Auxiliary functions
        f               = cell(1,size(t,2));
        ro               = zeros(1,size(t,2));
        % Control signal
        tau             = cell(1,size(t,2));
        tau_d             = cell(1,size(t,2));
        tau_n             = cell(1,size(t,2));
        % Actor-Critic ADP
        W_c             = cell(1,size(t,2));
        W_a             = cell(1,size(t,2));
        cap_gamma       = cell(1,size(t,2));
        % Error estimation
        e_es              = cell(1,size(t,2));
        % RISE
        Mu                =cell(1,size(t,2));
        
        noise             =zeros(1,size(t,2));
    %% Important parameters
        % Actor-Critic ADP

        R= 1*eye(3);
        Q=1*eye(6);
        % controller variables
        gamma=5;
        %gamma=0;
        eta_c=0.08;
        
        eta_a1=0.2;
        
        eta_a2=50;
        beta=0.001;
        v=0.001;
        % RISE
        lamda_1        = 1*eye(3);
        lamda_2        =50;
        Beta_1         =6;
        ks             =100;

    %% Initial conditions
        chi=0;
        cap_gamma{1}=1*eye(33);
        tau{1} = [-2;1;0];
        tau_d{1}=[0;0;0];
        % States
% %         Trajectory 1
%         eta{1}          = [1.2 1.5 1.5]';
%         upsilon{1}      = [0.1;0.2;0.3];
%        Trajectory 2
        eta{1}          = [0.5;0.1;0.2];
        upsilon{1}      = [0.1;0.2;0.3];

        
        % Actor-Critic ADP
        W_c{1}          = 3*rand(33,1);
        W_a{1}          = 5*rand(33,1);
    for i = 1:size(t,2)
        %% Disturbance caused by slipping
        %ro(i)            = cos(0.5*t(i))^4*sin(0.5*t(i))+cos(0.5*t(i))^2*sin(0.5*t(i))+cos(0.5*t(i))^3*sin(0.1*t(i)); 
       
            ro(i)=-0.1;
        %% Calculate H, H_dot, H_inv
        Rm=[cos(eta{i}(3)) -sin(eta{i}(3)) 0; sin(eta{i}(3)) cos(eta{i}(3)) 0;0 0 1];
        Am=[sin(pi/3) -cos(pi/3) -l; sin(pi) -cos(pi) -l; sin(-pi/3) -cos(-pi/3) -l];
        H=Rm*pinv(Am);
        Rm_dot=[-sin(eta{i}(3)) -cos(eta{i}(3)) 0; cos(eta{i}(3)) -sin(eta{i}(3)) 0; 0 0 0];
        H_dot=Rm_dot*pinv(Am);
        H_inv=[sin(eta{i}(3)+pi/3) -cos(eta{i}(3)+pi/3) l; -sin(eta{i}(3)) cos(eta{i}(3)) ...
            -l; sin(eta{i}(3)-pi/3) -cos(eta{i}(3)-pi/3) -l];
        %% Generate reference trajectory 
%        % Trajectory 1
%         eta_d{i}=[0.5*cos(2*t(i)); cos(t(i)); cos(0.5*t(i))];
%         eta_d_dot{i}    = [-sin(2*t(i)); -sin(t(i)); -0.5*sin(0.5*t(i))];
%         eta_d_dot_dot{i} = [-2*cos(2*t(i)); -cos(t(i)); -0.25*cos(0.5*t(i))];   
        
 %     Trajectory 2
%         eta_d{i}        = [0.5*sin(0.2*t(i));-0.5*cos(0.2*t(i));0.5*sin(0.2*t(i))];
%         eta_d_dot{i}    = [0.5*0.2*cos(0.2*t(i));0.5*0.2*sin(0.2*t(i));0.5*0.2*cos(0.2*t(i))]; 
%         eta_d_dot_dot{i} = [-0.5*0.2*0.2*sin(0.2*t(i));0.5*0.2*0.2*cos(0.2*t(i));-0.5*0.2*0.2*sin(0.2*t(i))];   
%      Trajectory 3
         eta_d{i}        = [sin(t(i)) sin(2*t(i)) cos(0.5*t(i))]';
        eta_d_dot{i}    = [cos(t(i)) 2*cos(2*t(i)) -0.5*sin(0.5*t(i))]'; 
        eta_d_dot_dot{i} = [-sin(t(i)) -4*sin(2*t(i)) -0.25*cos(0.5*t(i))]';  
        %% Errors
        e1{i}=eta_d{i}-eta{i};
        e2{i}=eta_d_dot{i} - upsilon{i}+lamda_1*e1{i};
        %% Calculate F,G,F_d,d
        F=-H*H_inv+muy*H*pinv(M)*H_inv;
        G=r*H*pinv(M);
        %% Calculate f
        f{i}=-(eta_d_dot_dot{i}+lamda_1*(eta_d_dot{i} - upsilon{i}))-F*(eta_d_dot{i}+lamda_1*e1{i});
        %% Z model
        z{i}=[e1{i}' e2{i}' eta_d{i}']';
        A=[-lamda_1*e1{i}+e2{i};
            -F*e2{i}           ;
            eta_d{i}           ];
        B=[zeros(3,3)  ;
            eye(3)  ;
            zeros(3,3)];    
        %%  Activation function
        % phi_z=1/2*[z{i}(1)*z{i}(1)      z{i}(2)*z{i}(2)      z{i}(3)*z{i}(3)      z{i}(1)*z{i}(4)     z{i}(1)*z{i}(5)     z{i}(1)*z{i}(6)...
        %            z{i}(2)*z{i}(4)      z{i}(2)*z{i}(5)      z{i}(2)*z{i}(6)      z{i}(3)*z{i}(4)     z{i}(3)*z{i}(5)     z{i}(3)*z{i}(6)...
        %            z{i}(1)^2*z{i}(2)^2  z{i}(1)^2*z{i}(3)^2  z{i}(2)^2*z{i}(3)^2  z{i}(1)^2*z{i}(7)^2 z{i}(1)^2*z{i}(8)^2 z{i}(1)^2*z{i}(9)^2 ...
        %            z{i}(1)^2*z{i}(10)^2 z{i}(1)^2*z{i}(11)^2 z{i}(1)^2*z{i}(12)^2 z{i}(2)^2*z{i}(7)^2 z{i}(2)^2*z{i}(8)^2 z{i}(2)^2*z{i}(9)^2 ...
        %            z{i}(2)^2*z{i}(10)^2 z{i}(2)^2*z{i}(11)^2 z{i}(2)^2*z{i}(12)^2 z{i}(3)^2*z{i}(7)^2 z{i}(3)^2*z{i}(8)^2 z{i}(3)^2*z{i}(9)^2 ...
        %            z{i}(3)^2*z{i}(10)^2 z{i}(3)^2*z{i}(11)^2 z{i}(3)^2*z{i}(12)^2 z{i}(4)^2*z{i}(7)^2 z{i}(4)^2*z{i}(8)^2 z{i}(4)^2*z{i}(9)^2 ...
        %            z{i}(4)^2*z{i}(10)^2 z{i}(4)^2*z{i}(11)^2 z{i}(4)^2*z{i}(12)^2 z{i}(5)^2*z{i}(7)^2 z{i}(5)^2*z{i}(8)^2 z{i}(5)^2*z{i}(9)^2 ...
        %            z{i}(5)^2*z{i}(10)^2 z{i}(5)^2*z{i}(11)^2 z{i}(5)^2*z{i}(12)^2 z{i}(6)^2*z{i}(7)^2 z{i}(6)^2*z{i}(8)^2 z{i}(6)^2*z{i}(9)^2 ...
        %            z{i}(6)^2*z{i}(10)^2 z{i}(6)^2*z{i}(11)^2 z{i}(6)^2*z{i}(12)^2]';



        phi_z=1/2*[z{i}(1)*z{i}(1)      z{i}(2)*z{i}(2)      z{i}(3)*z{i}(3)      z{i}(1)*z{i}(4)     z{i}(1)*z{i}(5)     z{i}(1)*z{i}(6)...
                   z{i}(2)*z{i}(4)      z{i}(2)*z{i}(5)      z{i}(2)*z{i}(6)      z{i}(3)*z{i}(4)     z{i}(3)*z{i}(5)     z{i}(3)*z{i}(6)...
                   z{i}(1)^2*z{i}(2)^2  z{i}(1)^2*z{i}(3)^2  z{i}(2)^2*z{i}(3)^2  z{i}(1)^2*z{i}(7)^2 z{i}(1)^2*z{i}(8)^2 z{i}(1)^2*z{i}(9)^2 ...
                   z{i}(2)^2*z{i}(7)^2 z{i}(2)^2*z{i}(8)^2 z{i}(2)^2*z{i}(9)^2 ...
                   z{i}(3)^2*z{i}(7)^2 z{i}(3)^2*z{i}(8)^2 z{i}(3)^2*z{i}(9)^2 ...
                   z{i}(4)^2*z{i}(7)^2 z{i}(4)^2*z{i}(8)^2 z{i}(4)^2*z{i}(9)^2 ...
                   z{i}(5)^2*z{i}(7)^2 z{i}(5)^2*z{i}(8)^2 z{i}(5)^2*z{i}(9)^2 ...
                   z{i}(6)^2*z{i}(7)^2 z{i}(6)^2*z{i}(8)^2 z{i}(6)^2*z{i}(9)^2 ...
                   ]';





        
         grad_phi_z = (1/2)*[2*z{i}(1) 0 0 0 0 0 0 0 0 0 0 0; ...
            0 2*z{i}(2) 0 0 0 0 0 0 0 0 0 0; ...
            0 0 2*z{i}(3) 0 0 0 0 0 0 0 0 0; ...
            z{i}(4) 0 0 z{i}(1) 0 0 0 0 0 0 0 0; ...
            z{i}(5) 0 0 0 z{i}(1) 0 0 0 0 0 0 0; ...
            z{i}(6) 0 0 0 0 z{i}(1) 0 0 0 0 0 0; ...
            0 z{i}(4) 0 z{i}(2) 0 0 0 0 0 0 0 0; ...
            0 z{i}(5) 0 0 z{i}(2) 0 0 0 0 0 0 0; ...
            0 z{i}(6) 0 0 0 z{i}(2) 0 0 0 0 0 0; ...
            0 0 z{i}(4) z{i}(3) 0 0 0 0 0 0 0 0; ...
            0 0 z{i}(5) 0 z{i}(3) 0 0 0 0 0 0 0; ...
            0 0 z{i}(6) 0 0 z{i}(3) 0 0 0 0 0 0; ...
            2*z{i}(1)*(z{i}(2)^2) 2*(z{i}(1)^2)*z{i}(2) 0 0 0 0 0 0 0 0 0 0; ...
            2*z{i}(1)*(z{i}(3)^2) 0 2*(z{i}(1)^2)*z{i}(3) 0 0 0 0 0 0 0 0 0; ...
            0 2*z{i}(2)*(z{i}(3)^2) 2*(z{i}(2)^2)*z{i}(3) 0 0 0 0 0 0 0 0 0; ...
            2*z{i}(1)*(z{i}(7)^2) 0 0 0 0 0 2*(z{i}(1)^2)*z{i}(7) 0 0 0 0 0; ...
            2*z{i}(1)*(z{i}(8)^2) 0 0 0 0 0 0 2*(z{i}(1)^2)*z{i}(8) 0 0 0 0; ...
            2*z{i}(1)*(z{i}(9)^2) 0 0 0 0 0 0 0 2*(z{i}(1)^2)*z{i}(9) 0 0 0; ...
   
            0 2*z{i}(2)*(z{i}(7)^2) 0 0 0 0 2*(z{i}(2)^2)*z{i}(7) 0 0 0 0 0; ...
            0 2*z{i}(2)*(z{i}(8)^2) 0 0 0 0 0 2*(z{i}(2)^2)*z{i}(8) 0 0 0 0; ...
            0 2*z{i}(2)*(z{i}(9)^2) 0 0 0 0 0 0 2*(z{i}(2)^2)*z{i}(9) 0 0 0; ...
            
            0 0 2*z{i}(3)*(z{i}(7)^2) 0 0 0 2*(z{i}(3)^2)*z{i}(7) 0 0 0 0 0; ...
            0 0 2*z{i}(3)*(z{i}(8)^2) 0 0 0 0 2*(z{i}(3)^2)*z{i}(8) 0 0 0 0; ...
            0 0 2*z{i}(3)*(z{i}(9)^2) 0 0 0 0 0 2*(z{i}(3)^2)*z{i}(9) 0 0 0; ...
            
            0 0 0 2*z{i}(4)*(z{i}(7)^2) 0 0 2*(z{i}(4)^2)*z{i}(7) 0 0 0 0 0; ...
            0 0 0 2*z{i}(4)*(z{i}(8)^2) 0 0 0 2*(z{i}(4)^2)*z{i}(8) 0 0 0 0; ...
            0 0 0 2*z{i}(4)*(z{i}(9)^2) 0 0 0 0 2*(z{i}(4)^2)*z{i}(9) 0 0 0; ...
           
            0 0 0 0 2*z{i}(5)*(z{i}(7)^2) 0 2*(z{i}(5)^2)*z{i}(7) 0 0 0 0 0; ...
            0 0 0 0 2*z{i}(5)*(z{i}(8)^2) 0 0 2*(z{i}(5)^2)*z{i}(8) 0 0 0 0; ...
            0 0 0 0 2*z{i}(5)*(z{i}(9)^2) 0 0 0 2*(z{i}(5)^2)*z{i}(9) 0 0 0; ...
            
            0 0 0 0 0 2*z{i}(6)*(z{i}(7)^2) 2*(z{i}(6)^2)*z{i}(7) 0 0 0 0 0; ...
            0 0 0 0 0 2*z{i}(6)*(z{i}(8)^2) 0 2*(z{i}(6)^2)*z{i}(8) 0 0 0 0; ...
            0 0 0 0 0 2*z{i}(6)*(z{i}(9)^2) 0 0 2*(z{i}(6)^2)*z{i}(9) 0 0 0];
            
        %% Cost function
        V_z(i)=W_c{i}'*phi_z;
        %% Controller
        u=-1/2*pinv(R)*B'*grad_phi_z'*W_a{i};
        %% RISE update
        Mu{i}=(ks+1)*(e2{i}-e2{1})+chi; % @@
        chi=((ks+1)*lamda_2*e2{i}+Beta_1*sign(e2{i}))*Step+chi;
        %% tau input
        tau_d{i+1}=Mu{i}-u;% needed checkin      % @@
        tau{i+1}=pinv(G)*tau_d{i+1};          % @@
        %% Update NN weight
        sigma=grad_phi_z*(A+B*u)-gamma*phi_z;
        m_s=(1+v*sigma'*cap_gamma{i}*sigma)^(1/2);
        sl=sigma/m_s;% not used
        D1=grad_phi_z*B*pinv(R)*B'*(grad_phi_z)';
        delta = 1/2*z{i}'*[Q zeros(6); zeros(6) zeros(6)]*z{i} + 1/8*W_a{i}'*D1*W_a{i} + W_c{i}'*(sigma);
        %delta = - z{i}'*[Q zeros(6); zeros(6) zeros(6)]*z{i} + 1/4*Wa{i}'*D1*Wa{i} + Wc{i}'*(sigma);
        W_c{i+1}=(-eta_c*cap_gamma{i}*sigma*delta/(m_s^2))*Step+W_c{i};
        cap_gamma{i+1}=(-eta_c*(-beta*cap_gamma{i}+cap_gamma{i}*(sigma*sigma')*...
        cap_gamma{i}/(m_s^2)))*Step+cap_gamma{i};
        %W_a{i+1}=(-eta_a2*(W_a{i}-W_c{i})-eta_a1*W_a{i}+eta_a/4*D1*W_a{i}*(sl'/m_s)*W_c{i})*Step+W_a{i};
        W_a{i+1}=(-eta_a2*(W_a{i}-W_c{i})-eta_a1*(1/(1+sigma'*sigma)^(1/2))...
            *grad_phi_z*B*pinv(R)*B'*grad_phi_z'*(W_a{i}-W_c{i})*delta)*Step+W_a{i};
        %% Update state
        F_d=-ro(i)*(G*tau{i});
        %d=inv(G)*F_d;
        %tau_d{i}=G*tau{i};% Wait
        tau_n{i}=F_d;%Wait hmmm
        upsilon{i+1}=(tau_n{i}+tau_d{i}-F*upsilon{i})*Step+upsilon{i};
        eta{i+1}=upsilon{i}*Step+eta{i}+ noise(i);
        %% Error between the RISE estimation and -(f+tau_n)
        e_es{i}=Mu{i}+f{i}+tau_n{i};
    end
%% Convert cell into matrix
    eta = cell2mat(eta);
    eta_d = cell2mat(eta_d);
    W_a = cell2mat(W_a);
    W_c = cell2mat(W_c);
    e_es=cell2mat(e_es);
    e1=cell2mat(e1);
    tau = cell2mat(tau);
    Mu=cell2mat(Mu);
    f=cell2mat(f);
    tau_n=cell2mat(tau_n);
%% Plot X,Y,Theta
    figure(1);
    
    plot(t,eta(1,1:size(t,2)),'-b','LineWidth',1.2);
    hold on
    plot(t,eta_d(1,:),'--r','LineWidth',1.2);
    title('X position');
    legend({'\eta_1','\eta_{d1}'},'FontSize',6);
    xlabel('Time(sec)');
    ylabel('\eta_1(m)');
    grid on
    hold off
    
    figure(2);
    plot(t,eta(2,1:size(t,2)),'-b','LineWidth',1.2);
    hold on
    plot(t,eta_d(2,:),'--r','LineWidth',1.2);
    title('Y position');
    legend({'\eta_2','\eta_{d2}'},'FontSize',6);
    xlabel('Time(sec)');
    ylabel('\eta_2(m)');
    grid on
    hold off
    
    figure(3);
    plot(t,eta(3,1:size(t,2)),'-b','LineWidth',1.2);
    hold on
    plot(t,eta_d(3,:),'--r','LineWidth',1.2);
    title('Heading angle');
    legend({'\eta_3','\eta_{d3}'},'FontSize',6);
    xlabel('Time(sec)');
    ylabel('\eta_3(rad)');
    grid on
    hold off
    
    figure(4);
    plot(t(1,1:size(t,2)-1),eta(1,1:size(t,2)-1)-eta_d(1,:),'-b','LineWidth',1.2);
    hold on
    plot(t(1,1:size(t,2)-1),eta(2,1:size(t,2)-1)-eta_d(2,:),'--r','LineWidth',1.2);
    hold on
    plot(t(1,1:size(t,2)-1),eta(3,1:size(t,2)-1)-eta_d(3,:),'-.g','LineWidth',1.2);
    title('Error signal');
    legend({'e_{11}','e_{12}','e_{13}'},'FontSize',8);
    xlabel('Time(sec)');
    ylabel('\eta-\eta_d(m or rad)');
    ylim([-0.1 0.6])
    grid on
    hold off
%% Plot Real Trajectory vs Reference Trajectory
    figure(5)
    plot(eta(1,1:size(t,2)-1),eta(2,1:size(t,2)-1));
    hold on
    plot(eta_d(1,:),eta_d(2,:));
    title('Trajectory');
    legend('Real Trajectory','Reference Trajectory');
    hold off
%% Plot Wa, Wc
    figure(6)
 
    plot(t,W_c(1,:));
    hold on;
    plot(t,W_c(2,:));
    plot(t,W_c(3,:));
    plot(t,W_c(4,:));
    plot(t,W_c(5,:));
    plot(t,W_c(6,:));
    plot(t,W_c(7,:));
    plot(t,W_c(8,:));
    plot(t,W_c(9,:));
    plot(t,W_c(10,:));
    ylim([0 5])
    title('Parameters of the critic NN W_{c}');
   legend({'\omega_1','\omega_2','\omega_3','\omega_4','\omega_5','\omega_6',...
        '\omega_7','\omega_8','\omega_9','\omega_{10}'},'NumColumns',5);
    hold off
    
    figure(7)
    plot(t,W_a(1,:));
    hold on;
    plot(t,W_a(2,:));
    plot(t,W_a(3,:));
    plot(t,W_a(4,:));
    plot(t,W_a(5,:));
    plot(t,W_a(6,:));
    plot(t,W_a(7,:));
    plot(t,W_a(8,:));
    plot(t,W_a(9,:));
    plot(t,W_a(10,:));
    title('Parameters of the actor NN W_{a}');
    legend({'\omega_1','\omega_2','\omega_3','\omega_4','\omega_5','\omega_6',...
        '\omega_7','\omega_8','\omega_9','\omega_{10}'},'NumColumns',5);
    hold off
%% Plot control signal
    
    figure(8);
    plot(t,tau(1,:));
    hold on
    plot(t,tau(2,:));
    plot(t,tau(3,:));
    hold off
    %ylim([-20 20]);
    legend('Torque 1','Torque 2','Torque 3');
    title('Control signal');
%% Plot error between the RISE estimation and -(f+tau_n)
   
    d=-(f+tau_n);
    figure(9);
    plot(t(1:size(t,2)-1),e_es(1,:),'g');
    title('error between the RISE estimation and -(f+\tau_n)')
    hold on
    plot(t(1:size(t,2)-1),Mu(1,:),'-b');
    plot(t(1:size(t,2)-1),d(1,:),'--r');
    legend('Error estimation','estimation','-(f+tau_n)');
    %ylim([-6 7])
    hold off
    %% in the last 10 seconds
    figure(10)
    plot(eta(1,size(t,2)-10000:size(t,2)-1),eta(2,size(t,2)-10000:size(t,2)-1));
    hold on
    plot(eta_d(1,end-10000:end),eta_d(2,end-10000:end));
    title('Trajectory');
    legend('Real Trajectory','Reference Trajectory');
    hold off
    %% Cost function
    figure
    plot(t(1:length(t)-1),V_z)
    ylim([0 10e-3])

    
    
% figure(7)
% p946_x=readmatrix('eta1.csv');
% pus_x=readmatrix('eta1m.csv');
% p946_y=readmatrix('eta2.csv');
% pus_y=readmatrix('eta2m.csv');
% ref_x=readmatrix('eta_d1.csv');
% ref_y=readmatrix('eta_d2.csv');
% figure
% n=150000;
% plot(p946_x(50000:n),p946_y(50000:n),'r');
% hold on
% plot(pus_x(50000:n),pus_y(50000:n),'-.b');
% plot(ref_x(50000:n),ref_y(50000:n),'--g');
% legend('[5]','Proposed algorithm','ref');

%writematrix(V_z,'V_RISE(gamma=0).csv');
 %writematrix(V_z,'V_RISE(gamma=10).csv');
 
 
% writematrix(eta,'eta_RISE.csv');
% writematrix(eta_d,'eta.csv'); 
% writematrix(tau,'tau_RISE.csv');
 

%% For comparison
% V1=readmatrix('V_RISE(gamma=0).csv');
% V2=readmatrix('V_RISE(gamma=0.1).csv');
% %V3=readmatrix('V_RISE(gamma=0.01).csv');
% V3=readmatrix('V_RISE(gamma=1).csv');
% %V5=readmatrix('V_RISE(gamma=1.5).csv');
% V4=readmatrix('V_RISE(gamma=5).csv');
% V5=readmatrix('V_RISE(gamma=7).csv');
% %V6=readmatrix('V_RISE(gamma=10).csv');
% figure
% plot(t(1:length(t)-1),V2,'-b')
% hold on
% plot(t(1:length(t)-1),V3,'-.g')
% plot(t(1:length(t)-1),V5,'m')
% plot(t(1:length(t)-1),V4,'r')
% plot(t(1:length(t)-1),V1,'k')
% %plot(t(1:length(t)-1),V6,'y')
% %plot(t(1:length(t)-1),V7,'m')
% %plot(t(1:length(t)-1),V8,'b')
% legend('gamma=0.1','gamma=1','gamma=7','gamma=5','gamma=0')
% ylim([0 10e-4])





